name: Update Traffic Data

on:
  workflow_dispatch:
  schedule:
    # Run every Friday at 8 AM ET (12 PM UTC)
    - cron: '0 12 * * 5'

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install @aws-sdk/client-s3
        
    - name: Create update script
      run: |
        cat > update-data.js << 'EOF'
        const { S3Client, GetObjectCommand, ListObjectsV2Command } = require('@aws-sdk/client-s3');
        const fs = require('fs');
        
        async function updateData() {
          const client = new S3Client({
            region: 'auto',
            endpoint: process.env.R2_ENDPOINT,
            credentials: {
              accessKeyId: process.env.R2_ACCESS_KEY_ID,
              secretAccessKey: process.env.R2_SECRET_ACCESS_KEY,
            },
          });
        
          try {
            // List objects in the bucket with manhattan prefix
            const listCommand = new ListObjectsV2Command({
              Bucket: process.env.R2_BUCKET_NAME,
              Prefix: 'manhattan/',
            });
            
            const listResponse = await client.send(listCommand);
            
            if (!listResponse.Contents || listResponse.Contents.length === 0) {
              throw new Error('No objects found in the bucket');
            }
            
            // Find the latest object by LastModified date
            const latestObject = listResponse.Contents.reduce((latest, current) => {
              return current.LastModified > latest.LastModified ? current : latest;
            });
            
            console.log(`Using latest object: ${latestObject.Key}`);
            
            // Get the latest JSON data from R2
            const command = new GetObjectCommand({
              Bucket: process.env.R2_BUCKET_NAME,
              Key: latestObject.Key,
            });
            
            const response = await client.send(command);
            const jsonData = await response.Body.transformToString();
            
            // Read the current HTML file
            const htmlContent = fs.readFileSync('index.html', 'utf8');
            
            // Find and replace the embedded JSON data
            const jsonRegex = /const closuresData = \{[\s\S]*?\};/;
            const newJsonContent = `const closuresData = ${jsonData};`;
            
            const updatedHtml = htmlContent.replace(jsonRegex, newJsonContent);
            
            // Write the updated HTML file
            fs.writeFileSync('index.html', updatedHtml);
            
            console.log('Successfully updated traffic data');
          } catch (error) {
            console.error('Error updating data:', error);
            process.exit(1);
          }
        }
        
        updateData();
        EOF
        
    - name: Update embedded JSON data
      env:
        R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
      run: node update-data.js
      
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update traffic data - $(date +'%Y-%m-%d')"
          git push
        fi
